<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.synthesisClass.mapper.MemberMapper">
	<!-- 1년이상 미접속시 휴면계정처리 -->
	<update id="updateActiveOntoOff" parameterType="com.example.synthesisClass.dto.Member">
		UPDATE member m
		SET active = 'OFF'
		WHERE m.active = 'ON'
		AND NOT EXISTS (
		    SELECT 1
		    FROM login_history lh
		    WHERE lh.id = m.id
		    AND lh.logindate >= DATE_SUB(NOW(), INTERVAL 1 YEAR)
		);
	</update>
	
	<select id="selectActiveByOff" parameterType="com.example.synthesisClass.dto.Member">
		SELECT id, email
		FROM member
		WHERE active = 'OFF'
	</select>
	
	<!--  -->
	<update id="findMemberPw" parameterType="com.example.synthesisClass.dto.Member">
		UPDATE member
		SET pw = #{pw}
		WHERE id = #{id}
		AND email = #{email}
	</update>
	
	<!-- 임시 비빌번호로 비밀번호 변경 -->
	<update id="rechangeMemberPw" parameterType="com.example.synthesisClass.dto.Member">
	    UPDATE member
	    SET pw = #{newPw}, pwcktime = NULL
	    WHERE id = #{id}
	    AND pw = #{pw}
	    AND pwcktime IS NOT NULL
	    AND TIMESTAMPDIFF(MINUTE, pwcktime, NOW()) &lt; 11
	</update>
	
	<!-- 임시비밀번호 받급받고 10분(pwcktime)내의 변경 -->
	<update id="updateTemporaryPassword" parameterType="map">
	    UPDATE member
	    SET pw = #{pw},
	        pwcktime = #{pwcktime}
	    WHERE id = #{id}
	</update>
	
	<!-- 상세정보 -->
	<select id="selectMemberOne" parameterType="string" resultType="com.example.synthesisClass.dto.Member">
		SELECT id, email
		FROM member
		WHERE id = #{id}
	</select>
	
	<!-- 회원리시트 -->
	<select id="selectMemberList" parameterType="com.example.synthesisClass.dto.Member" resultType="com.example.synthesisClass.dto.Member">
		SELECT id, active, role
		FROM member
		<if test="_parameter != null and _parameter != ''">
			WHERE 1=1
			AND id LIKE CONCAT('%', #{serchWord}, '%')
		ORDER BY id
		</if>
	</select>
	
	<!-- 비밀번호 수정 -->
	<update id="modifyMemeber" parameterType="com.example.synthesisClass.dto.Member">
		UPDATE member
		SET pw = #{newPw}
		WHERE id = #{id}
		AND pw = #{pw}
	</update>
	
	<!-- 회원탈퇴 -->
	<delete id="deleteMember" parameterType="com.example.synthesisClass.dto.Member">
		DELETE 
		FROM member
		WHERE id = #{id}
		AND pw = #{pw}
	</delete>
	
	<!-- 비밀번호 변경이력 삭제 -->
	<delete id="deletePwHistory" parameterType="com.example.synthesisClass.dto.PwHistory">
		DELETE FROM pw_history
		WHERE no IN (
		    SELECT no FROM (
		        SELECT no,
		               ROW_NUMBER() OVER (PARTITION BY id ORDER BY change_date DESC) AS rn
		        FROM pw_history
		    ) AS sub
		    WHERE rn &gt; 5
		)
	</delete>
</mapper>